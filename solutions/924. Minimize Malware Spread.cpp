class DSU {
public:
    vector<int> parent;
    vector<int> rank;
    vector<int> Size;
    DSU (int n) {
        parent.resize(n), rank.resize(n, 0), Size.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            Size[i] = 1;
        }
    }
    int findPar(int x) {
        if (x == parent[x]) {
            return x;
        }
        return parent[x] = findPar(parent[x]);
    }
    void Union(int a, int b) {
        a = findPar(a), b = findPar(b);
        if (a == b) {
            return;
        } else if (rank[a] > rank[b]) {
            parent[b] = a;
            Size[a] += Size[b];
        } else if (rank[b] > rank[a]) {
            parent[a] = b;
            Size[b] += Size[a];
        } else {
            parent[b] = a;
            ++rank[a];
            Size[a] += Size[b];
        }
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int p;
        DSU obj(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j]) {
                    obj.Union(i, j);
                }
            }
        }
        vector<int> infected(n, 0);
